// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  likes         Like[]
  collects      Collect[]
  comments      Comment[]
  attentions    Attention[]
}

model Profile {
  id       Int       @id @default(autoincrement())
  userId   String?   @unique
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender   Gender
  age      Int
  phone    String
  birthday DateTime?
  level    Int       @default(0)
}

model Article {
  id           String    @id @default(uuid())
  title        String
  content      String    @db.Text
  desc         String    @db.Text
  likeCount    Int       @default(0)
  collectCount Int       @default(0)
  commentCount Int       @default(0)
  readCount    Int       @default(0)
  updatedAt    DateTime  @default(now())
  createdAt    DateTime  @default(now())
  Tags         Tag[]
  Comments     Comment[]
  Likes        Like[]
  Collections  Collect[]
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?
}

model Nav {
  id   Int    @id @default(autoincrement())
  key  String @unique
  name String @unique
}

model Tag {
  id       Int       @id @default(autoincrement())
  key      String    @unique
  name     String    @unique
  Articles Article[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Article   Article? @relation(fields: [articleId], references: [id])
  articleId String?

  @@unique([userId, articleId])
}

model Collect {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Article   Article  @relation(fields: [articleId], references: [id])
  articleId String

  @@unique([userId, articleId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  likes     Int      @default(0)
  content   String   @db.Text
  parentId  Int      @default(0)
  createdAt DateTime @default(now())
  Article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Attention {
  user       User   @relation(fields: [follower], references: [id])
  follower   String
  followered String

  @@unique([follower, followered])
}
